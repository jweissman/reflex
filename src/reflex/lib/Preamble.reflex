/*
 * class Object
 * The class of everything!
 */
class Object {
    neq(other) { self.eq(other).negate() }
    isA(klass) { self.isInstanceOf(klass) }
    nil() { false }
    true() { true }
    false() { Boolean.negate(self.true()) }
}

/*
 * Class
 *
 * The class of classes.
 */
class Class {
    isDescendantOf(other) { other.isAncestorOf(self) }
    isKindOf(other) { other == self || other.isAncestorOf(self) }
}

/**
 * Function
 *
 * The class of functions.
 */
class Function {
    meta.instanceEval { new(fn) { fn } }
}

/* 
 * Nihil
 *
 * The class of uninhabited types.
 */
class Nihil {
    nil() { true }
    true() { false }
}

/*
 * Boolean
 * 
 * The class of truth-values.
 */
class Boolean {
    eq(other) { self.isInstanceOf(other.class) }
    negate() { Boolean.negate(self) }
    meta.instanceEval {
        negate(value) {
            if (value.true()) { false } else { true }
        }
    }
}

class Truth < Boolean {
    negate() { false }
}

class Falsity < Boolean {
    true() { false }
    negate() { true }
}

/*
 * Number
 * 
 * The class of numeric values
 */
class Number {
    zero() { self == 0 }
    one() { self == 1 }
    positive() { self.gt(0) }
    true() { self.zero().negate() }
    divide(other) {
        if (other.zero()) {
            if (self.zero()) {
                Indeterminate.new()
            } else {
                if (self.positive()) {
                    PositiveApeiron.new()
                } else {
                    NegativeApeiron.new()
                }
            }
        } else {
            self.rawDiv(other)
        }
    }

    times(&timesBlock) {
        counter = self;
        until (counter.zero()) {
            counter = counter - 1;
            timesBlock()
        }
    }

    upto(stop, &uptoBlock) {
        i = self;
        while (i <= stop) {
           uptoBlock(i);
           i = i + 1
        }
    }
}

class Integer < Number {}
class Float < Number {}
class Indeterminate < Number {}
class Apeiron < Number {
    add(other) { self }
    subtract(other) { self }
    multiply(other) { self }
    divide(other) { self }
}
class PositiveApeiron < Apeiron { negate() { NegativeApeiron.new() } }
class NegativeApeiron < Apeiron { negate() { PositiveApeiron.new() } }

/**
 * Array
 *
 * The class of object-valued index spaces.
 */
class Array {
    add(other) { self.concat(other) }
    each(&eachBlock) {
        0.upto(self.length()-1) { |it|
            element = self.get(it);
            eachBlock(element);
        }
    }

    //eachWithIndex(&eachBlock) {
    //    0.upto(self.length()-1) { |i|
    //        element = self.get(i);
    //        eachBlock(element, i);
    //    }
    //}

    map(&mapFn) {
        res = Array.new()
        index=0
        self.each { |e|
            mapped = mapFn(e)
            res.set(index, mapped);
            index=index+1
        }
        res
    }
}

/**
 * String
 *
 * The class of words
 */
class String {
    add(other) { self.concat(other) }
}

# the universal constants
nil = Nihil.new()
true = Truth.new()
false = Falsity.new()
Infinity = PositiveApeiron.new()
NegativeInfinity = NegativeApeiron.new()

// old ways die hard
require = Kernel.import

// wire up main so it can define instance methods on itself...
self.defineMethod = meta.defineMethod