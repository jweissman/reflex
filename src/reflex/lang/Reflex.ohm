Reflex {
    Program
      = ListOf<Stmt, delim*> delim?
    
    Stmt
      =
      | Expr
      
    Expr =
	    | AlgExpr

    AlgExpr =
      | Message "=" Expr -- local_assign
      | BoolExpr

    BoolExpr
      = BoolExpr "||" CmpExpr -- bool_or
      | BoolExpr "&&" CmpExpr -- bool_and
      | BoolExpr "?" Expr ":" Expr -- tern
      | CmpExpr

    CmpExpr
      = CmpExpr "==" AddExpr -- eq
      | CmpExpr "!=" AddExpr -- neq
      | AddExpr

    AddExpr
      = AddExpr "+" MulExpr -- sum
      | AddExpr "-" MulExpr -- difference
      | MulExpr
    
    MulExpr
      = MulExpr "*" DotExpr -- product
      | MulExpr "/" DotExpr -- quotient
      | MulExpr "%" DotExpr -- modulo
      | DotExpr

    DotExpr
      = DotExpr "." Message "=" Expr -- sendEq
      | DotExpr "." Message Arguments -- call
      | DotExpr "." Message -- ivar_get
      | PriExpr

    PriExpr
      = 
	    | "-" Expr -- neg
	    | CondExpr
      | LoopExpr
      | Defclass
      | Defun
      | FunctionLit
	    | "(" Expr ")" -- parens
      | Message Arguments -- casualCall
      | Bareword
      | NumberLit
      | StringLit

    LoopExpr
      = While Condition Block -- while 
      | Until Condition Block -- until 
    
    While = "while"
    Until = "until"
      
	  CondExpr =
      | CondParticle
	    | CondStmt
    CondTernary
      = Expr "?" Expr ":" Expr
      
    CondStmt
      = If Condition Then? CondBlock Else CondBlock -- ifThenElse
      | Unless Condition Then? CondBlock Else CondBlock -- unlessThenElse
      | If Condition Then? CondBlock -- ifThen
      | Unless Condition Then? CondBlock -- unlessThen

    CondParticle
     = PriExpr If Condition Else Expr  -- ifElse
     | PriExpr Unless Condition Else Expr -- unlessElse
     | PriExpr If Condition -- if
     | PriExpr Unless Condition -- unless

    CondBlock
      = Block
      | Expr

    Conj
      = If
      | Unless
    
    If
      = "if"
    
    Unless
      = "unless"
    Then
      = "then"
    Else
      = "else"
      | "otherwise"

    Condition 
      = Expr

    Defclass
      = Class ClassName ExtendsClass Block -- extends
      | Class ClassName Block -- plain
    
    Class
      = "class"

    ClassName
      = capitalIdent

    ExtendsClass
      = Extends Bareword

    Extends
      = "<"

    Defun
      = FunctionName FormalParams Block

    FunctionName
      = ident

    Message
      = ~Keyword ident
      
    Keyword = If | Else | Unless | Then

    Bareword
      = Message
      
    Arguments
      = Args? PipedBlock -- block
      | Args -- no_block
   
    Args
      = FormalArguments
      | BareArguments
    
    FormalArguments
      = "(" ListOf<Arg, ","> ")"

    BareArguments
      = ~"(" NonemptyListOf<Arg, ",">
     
    Arg
      = "&" Expr -- ref
      | Expr
    
    Params
      = FormalParams
      | BareParams
      
    FormalParams
      = "(" ListOf<Param, ","> ")"
    
    BareParams
      = ~"(" ListOf<Param, ",">

    Param
      = "&" Bareword -- ref
      | Bareword

    Block 
      = "{" Program "}"
    
      
    PipedBlock = "{" PipeVars? Program "}"
    PipeVars = "|" ListOf<Param,","> "|"

    FunctionLit
      = FormalFunctionLiteral 
      | StabbyFunctionLiteral
    
    StabbyFunctionLiteral
      = "->" Block
      | "->" Expr
      
    FormalFunctionLiteral 
      = Params "=>" Block
      | Params "=>" Expr
    
    NumberLit
      = digit+
    
    StringLit
      = "'" #singleStringCharacter* "'"
      | "\"" #doubleStringCharacter* "\""

    singleStringCharacter
      = ~("\'" | "\\" | "\n") sourceCharacter -- non_escaped
    //   | "\\" unicodeLiteral                   -- escaped
   
    doubleStringCharacter
      = ~("\"" | "\\" | "\n") sourceCharacter -- non_escaped
    //   | "\\" unicodeLiteral                   -- escaped
    
    sourceCharacter = any
    
    // unicodeLiteral
    //   = "u" hexDigit hexDigit hexDigit hexDigit

    capitalIdent
      = "A".."Z" idChar*

    ident
      = letter idChar*
    
    idChar = alnum | "_"
    
    delim
      = delimiter
      
    delimiter = ";"
    
    lineTerminator
      = "\n"
      | "\r"
  
    whitespace = #" " | " " | "\t"
      
      
    
    comment = shortComment | formalComment
    
    formalComment = formalCommentStart (~formalCommentEnd any)* formalCommentEnd
    formalCommentStart = "/*"
    formalCommentEnd = "*/"
    
    shortComment
      = commentMark #(~lineTerminator any)* lineTerminator?
    
	  commentMark
      = octothorpe
      | doubleSlash
    octothorpe = #"#"
    doubleSlash = #"/" #"/"
	  space := comment | whitespace | lineTerminator

}