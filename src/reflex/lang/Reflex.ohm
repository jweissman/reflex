Reflex {
    Program
      = ListOf<Stmt, delim> delim*
    
    Stmt
      = Expr
      
    Expr
      = SendMessageEq
      | SendMessage
      | Defun
      | Defclass
      | StringLit
      | FunctionLit
      | Invocation
      
    Invocation
      = Barecall
      | Bareword

    Defclass
      = Class ClassName ExtendsClass Block -- extends
      | Class ClassName Block -- plain
    
    Class
      = "class"

    ClassName
      = capitalIdent

    ExtendsClass
      = Extends Bareword

    Extends
      = "<"

    Defun
      = "def"? FunctionName FormalParams Block

    FunctionName
      = ident
 
    SendMessageEq
      = (Bareword | Funcall | SendMessage) "." Message "=" Expr -- other
      | Message "=" Expr -- local

    SendMessage
      = (SendMessage | Funcall | Bareword) "." Message Arguments -- call
      | Receiver "." Message -- attr

    Funcall
      = Barecall
    
    Barecall
      = Message Arguments
    
    Receiver
      = //SendMessage
      | Funcall
      | SendMessage
      | Bareword

    Message
      = ident

    Bareword
      = ident
      
    Arguments
      = Args? PipedBlock -- block
      | Args -- no_block
   
    Args
      = FormalArguments
      | BareArguments
    
    FormalArguments
      = "(" ListOf<Arg, ","> ")"

    BareArguments
      = ~"(" NonemptyListOf<Arg, ",">
     
    Arg
      = "&" Expr -- ref
      | Expr
    
    Params
      = FormalParams
      | BareParams
      
    FormalParams
      = "(" ListOf<Param, ","> ")"
    
    BareParams
      = ~"(" ListOf<Param, ",">

    Param
      = "&" Bareword -- ref
      | Bareword

    Block
      = "{" Program "}"
      
    PipedBlock = "{" PipeVars? Program "}"
    PipeVars = "|" ListOf<Param,","> "|"

    FunctionLit
      = FormalFunctionLiteral 
      | StabbyFunctionLiteral
    
    StabbyFunctionLiteral
      = "->" Block
      | "->" Expr
      
    FormalFunctionLiteral 
      = Params "=>" Block
      | Params "=>" Expr
      //| ident "=>" Expr
    
    StringLit
      = "'" #singleStringCharacter* "'"
      | "\"" #doubleStringCharacter* "\""

    singleStringCharacter
      = ~("\'" | "\\" | "\n") sourceCharacter -- non_escaped
    //   | "\\" unicodeLiteral                   -- escaped
   
    doubleStringCharacter
      = ~("\"" | "\\" | "\n") sourceCharacter -- non_escaped
    //   | "\\" unicodeLiteral                   -- escaped
    
    sourceCharacter = any
    
    // unicodeLiteral
    //   = "u" hexDigit hexDigit hexDigit hexDigit

    capitalIdent
      = "A".."Z" idChar*

    ident
      = letter idChar*
    
    idChar = alnum | "_"
    
    delim
      = ";"
      | lineTerminator
    
    lineTerminator
      = "\n"
      | "\r"
}