Reflex {
    Program
      = ListOf<Stmt, delim> delim*
    
    Stmt
      = Expr
      
    Expr
      = SendMessageEq
      | SendMessage
      | Defun
      | Defclass
      | StringLit
      | FunctionLit
      | Invocation
      
    Invocation
      = Funcall
      | Bareword

    Defclass
      = Class ClassName Block
    
    Class = "class"

    ClassName = ident

    Defun
      = FunctionName Params Block

    FunctionName
      = ident
 
    SendMessageEq
      = (Bareword | Funcall | SendMessage) "." Message "=" Expr -- other
      | Message "=" Expr -- local

    SendMessage
      = Receiver "." Message Args -- call
      | Receiver "." Message -- attr
    
    Funcall
      = Message Args
    
    Receiver
      = //SendMessage
      | Funcall
      | SendMessage
      | Bareword

    Message
      = ident

    Bareword
      = ident
   
    Args
      = "(" ListOf<Expr, ","> ")"

    Params
      = "(" ListOf<Bareword, ","> ")"

    Block
      = "{" Program "}"

    FunctionLit
      = Params "=>" Block
    
    StringLit
      = "'" #singleStringCharacter* "'"
      | "\"" #doubleStringCharacter* "\""

    singleStringCharacter
      = ~("\'" | "\\" | "\n") sourceCharacter -- non_escaped
    //   | "\\" unicodeLiteral                   -- escaped
   
    doubleStringCharacter
      = ~("\"" | "\\" | "\n") sourceCharacter -- non_escaped
    //   | "\\" unicodeLiteral                   -- escaped
    
    sourceCharacter = any
    
    // unicodeLiteral
    //   = "u" hexDigit hexDigit hexDigit hexDigit

    ident
      = letter alnum*
    
    delim
      = ";"
      | lineTerminator
    
    lineTerminator
      = "\n"
      | "\r"
}