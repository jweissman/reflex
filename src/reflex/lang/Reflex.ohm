Reflex {
    Program
      = StmtList
      // | EmptyProgram
    StmtList = delim* ListOf<Stmt, delim> delim*
    // EmptyProgram = delim*
    Stmt = delim* Expr
      
    Expr =
    	| LoopExpr
		  | CondExpr
	    | Defclass
      | Defun
      | CasualCall
		  | EqExpr
      | AlgExpr

     EqExpr =
       | ObjectDot "." Name "=" Expr -- send_eq
       | ArrayIndex "=" Expr -- arr_set_eq
       | Message "=" Expr -- local_eq
       
     ObjectDot
       = ObjectDot "." Name CarefulArguments &"." -- call 
       | ObjectDot "." Name &"." -- dot
       | CoreExpr
    
    AlgExpr =
      | BoolExpr

    BoolExpr
      = 
      | BoolExpr "||" CmpExpr -- bool_or
      | BoolExpr "&&" CmpExpr -- bool_and
      | BoolExpr "?" CmpExpr ":" CmpExpr -- tern
      //| "!" CmpExpr -- bool_not
      | CmpExpr

    CmpExpr
      = CmpExpr "==" AddExpr -- eq
      | CmpExpr "!=" AddExpr -- neq
      | CmpExpr "<" AddExpr -- lt
      | CmpExpr ">" AddExpr -- gt
      | CmpExpr "<=" AddExpr -- lte
      | CmpExpr ">=" AddExpr -- gte
      | AddExpr

    AddExpr
      = AddExpr "+" MulExpr -- sum
      | AddExpr "-" MulExpr -- difference
      | MulExpr
    
    MulExpr
      = MulExpr "*" PowExpr -- product
      | MulExpr "/" PowExpr -- quotient
      | MulExpr "%" PowExpr -- modulo
      | PowExpr

    PowExpr
      = PowExpr "^" PriExpr -- exponent
      // | PowExpr "^^" PriExpr -- root
      | PriExpr

    PriExpr
      =
	    | "!" PriExpr -- not
	    | "-" PriExpr -- neg
        | FunctionLit
        | ObjectExpr
      
     ObjectExpr
       = ObjectDot "." Name CarefulArguments -- call
       | ObjectDot "." Name -- dot
       | CoreExpr
       
     CoreExpr =
       | ParenExpr
      //  | HashLit
       | StringLit
       | SymbolLit
       | RangeLit
       | NumberLit
       | ArrayIndex
       | ArrayLit
       | Message CarefulArguments -- funcall
       | HashLit
       | Bareword

    CarefulCall
      = ObjectDot "." Name CarefulArguments
      
    CasualCall
      = ObjectDot "." Name CasualArguments -- obj
      | PriExpr CasualArguments -- msg
      
    CarefulArguments
      = FormalArguments PipedBlock -- args_block
      | FormalArguments
      | PipedBlock -- block
    
    CasualArguments
      = ~"-" BareArguments PipedBlock -- block
      | ~"-" BareArguments

    FormalArguments
      = "(" ListOf<Arg, ","> ")"

    BareArguments
      = ~lineTerminator ~"(" NonemptyListOf<Arg, ",">
     
    Arg
      = "&" Expr -- ref
      | "..." Expr -- ellipsis
      | Expr
       
    Block
      = "{" Program "}"
      | Do Program End
      
    PartBlock = Program End
    
    Do = "do"
    End = "end"
      
    PipedBlock
      = "{" PipeVars? Program "}"
      | Do PipeVars? Program End

    PipeVars
      = "|" ListOf<Param,","> "|"

    ParenExpr
      = "(" Expr ")"

    LoopExpr
      = While Condition Block -- while 
      | Until Condition Block -- until 
    
    While = "while"
    Until = "until"
      
	  CondExpr =
      | CondParticle
	    | CondStmt
    CondTernary
      = Expr "?" Expr ":" Expr
      
    CondStmt
      = If Condition Then? CondBlock Else CondBlock -- ifThenElse
      | Unless Condition Then? CondBlock Else CondBlock -- unlessThenElse
      | If Condition Then? CondBlock -- ifThen
      | Unless Condition Then? CondBlock -- unlessThen

    CondParticle
     = Expr If Condition Else Expr  -- ifElse
     | Expr Unless Condition Else Expr -- unlessElse
     | Expr If Condition -- if
     | Expr Unless Condition -- unless

    CondBlock
      = Block
      | Expr

    Conj
      = If
      | Unless
    
    If
      = "if"
    
    Unless
      = "unless"
    Then
      = "then"
    Else
      = lineTerminator Else -- newline
      | "else"
      | "otherwise"

    Condition 
      = ParenExpr
      | CmpExpr

    Defclass
      = ClassDefinition
      | SubclassDefinition
      
    SubclassDefinition
      = Class ClassName ExtendsClass Block //-- extends
	    | Arch ClassName ExtendsClass Block //-- arch_extends
      // = Class ClassName ExtendsClass PartBlock //-- partExtends
      
      ClassDefinition
      = PlainClass //
      | Arch ClassName Block -- arch
      // = 
    
    PlainClass
      = Class ClassName Block //-- plain
      | Class ClassName PartBlock //-- partPlain
    
    Arch
      = ~("A".."Z") ident
    
    Class
      = "class"

    ClassName
      = capitalIdent

    ExtendsClass
      = Extends Bareword

    Extends
      = "<"
    
    Defun
      = FunctionName FormalParams Block -- formal
      | Def FunctionName (BareParams | FormalParams) PartBlock -- doEnd
      
    Def = "def"

    FunctionName
      = Name

    Message
      = ~Keyword ident
    
    Name
      = ident
      
    Keyword = Do | End | If | Else | Unless | Then | While | Until

    Bareword
      = Message
 
    Params
      = FormalParams
      | BareParams
      
    FormalParams
      = "(" ListOf<Param, ","> ")"
    
    BareParams
      = ~"(" NonemptyListOf<Param, ",">

    Param
      = "&" Bareword -- ref
      | "..." Bareword -- ellipsis
      | Bareword

    FunctionLit
      = FormalFunctionLiteral 
      | StabbyFunctionLiteral
    
    StabbyFunctionLiteral
      = "->" Block
      | "->" Expr
      
    FormalFunctionLiteral 
      = Params "=>" Block
      | Params "=>" Expr

    HashLit
      = "{" ListOf<Tuple, ","> "}"
    
    Tuple
      = HashKey ":" Expr -- kv
      | CoreExpr "=>" Expr -- obj

    HashKey = alnum+

    ArrayLit
      = "[" ListOf<Expr, ","> "]"

    ArrayIndex
      = CoreExpr "[" Expr "]"

    RangeLit
      = CoreExpr ".." CoreExpr
    
    NumberLit
      = digit+ "." digit+ -- float
      | #(~whitespace digit)+ -- int
    
    StringLit
      = "'" #singleStringCharacter* "'"
      | "\"" #doubleStringCharacter* "\""

    SymbolLit
      = ":" #symbolCharacter*

    symbolCharacter
      = alnum 
      //sourceCharacter
      //~(":" | "(" | ")" | "." | "," | "\"" | "\'" | "\\" "\n") sourceCharacter

    singleStringCharacter
      = ~("\'" | "\\" | "\n") sourceCharacter -- non_escaped
      // | "\\" unicodeLiteral                   -- escaped
   
    doubleStringCharacter
      = ~("\"" | "\\" | "\n") sourceCharacter -- non_escaped
      | "\\" unicodeLiteral                   -- escaped
    
    sourceCharacter = any
    
    unicodeLiteral
      = "u" hexDigit hexDigit hexDigit hexDigit

    capitalIdent
      = "A".."Z" idChar*

    ident
      = letter idChar*
    
    idChar
      = alnum
      | "_"
    
    delim
      = delimiter
      | lineTerminator
      
    delimiter
      = ";"
    
    lineTerminator
      = "\n"
      | "\r"
  
    whitespace = #" " | " " | "\t"
    
    comment
      = shortComment
      | formalComment
    
    formalComment
      = formalCommentStart (~formalCommentEnd any)* formalCommentEnd
    formalCommentStart = "/*"
    formalCommentEnd = "*/"
   
    shortComment
      = commentMark #(~lineTerminator any)* lineTerminator?
    
	  commentMark
      = octothorpe
      | doubleSlash
    octothorpe
      = #"#"
    doubleSlash
      = #"/" #"/"
	  space
      := comment
      | whitespace
      | "\\" lineTerminator -- escapeNewline

}